// -----------------------------------------------------------------------
// <auto-generated>
//   This code was generated by Pegasus 4.1.0.0
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

namespace
Parsers
{
    using System;
    using System.Collections.Generic;
    using Pegasus.Common;

    /// <summary>
    ///  Parses a string according to the rules of the <see cref="Parser" /> grammar.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Pegasus", "4.1.0.0")]
    public
    partial class
    Parser
    {

        /// <summary>
        ///  Parses a string according to the rules of the <see cref="Parser" /> grammar.
        /// </summary>
        /// <param name="subject">The parsing subject.</param>
        /// <param name="fileName">The optional file name to use in error messages.</param>
        /// <returns>The <see cref="ProgramNode" /> parsed from <paramref name="subject" />.</returns>
        /// <exception cref="FormatException">
        ///  Thrown when parsing fails against <paramref name="subject"/>.  The exception's <code>Data["cursor"]</code> will be set with the cursor where the fatal error occurred.
        /// </exception>
        public ProgramNode Parse(string subject, string fileName = null)
        {
            var cursor = new Cursor(subject, 0, fileName);
            return this.StartRuleHelper(cursor, this.program, "program").Value;
        }

        private IParseResult<
            #line 5 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
        ProgramNode
            #line default
            > program(ref Cursor cursor)
        {
            IParseResult<ProgramNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "In the beginning God created");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this._(ref cursor);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    var fStart = cursor;
                    var startCursor1 = cursor;
                    IParseResult<IList<string>> r4 = null;
                    var startCursor2 = cursor;
                    var l0 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r5 = null;
                        r5 = this.ParseClass(ref cursor, "UU++0000000\u00ff  ..");
                        if (r5 != null)
                        {
                            l0.Add(r5.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l0.Count >= 1)
                    {
                        r4 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l0.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                    if (r4 != null)
                    {
                        {
                            var len = cursor.Location - startCursor1.Location;
                            r3 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                                state.Subject.Substring(startCursor1.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                    var fEnd = cursor;
                    var f = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.EOL(ref cursor);
                        if (r6 != null)
                        {
                            IParseResult<BlockNode> r7 = null;
                            var bodyStart = cursor;
                            r7 = this.block(ref cursor);
                            var bodyEnd = cursor;
                            var body = ValueOrDefault(r7);
                            if (r7 != null)
                            {
                                r0 = this.ReturnHelper<ProgramNode>(startCursor0, ref cursor, state =>
                                    #line 6 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
     new ProgramNode(f,body)
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 8 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
      BlockNode
            #line default
            > block(ref Cursor cursor)
        {
            IParseResult<BlockNode> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<SyntaxNode> r1 = null;
                var headStart = cursor;
                r1 = this.statement(ref cursor);
                var headEnd = cursor;
                var head = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<string> r2 = null;
                    r2 = this.EOL(ref cursor);
                    if (r2 != null)
                    {
                        IParseResult<BlockNode> r3 = null;
                        var tailStart = cursor;
                        r3 = this.block(ref cursor);
                        var tailEnd = cursor;
                        var tail = ValueOrDefault(r3);
                        if (r3 != null)
                        {
                            r0 = this.ReturnHelper<BlockNode>(startCursor0, ref cursor, state =>
                                #line 9 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                                      new BlockNode(head).Concat(tail)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<SyntaxNode> r4 = null;
                var lineStart = cursor;
                r4 = this.statement(ref cursor);
                var lineEnd = cursor;
                var line = ValueOrDefault(r4);
                if (r4 != null)
                {
                    r0 = this.ReturnHelper<BlockNode>(startCursor1, ref cursor, state =>
                        #line 10 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                       new BlockNode(line)
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 14 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
             VariableNode
            #line default
            > variable(ref Cursor cursor)
        {
            IParseResult<VariableNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var nameStart = cursor;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            var startCursor2 = cursor;
            IParseResult<string> r3 = null;
            r3 = this.keyword(ref cursor);
            if (r3 == null)
            {
                r2 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
            }
            else
            {
                cursor = startCursor2;
            }
            if (r2 != null)
            {
                IParseResult<IList<string>> r4 = null;
                var startCursor3 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r5 = null;
                    r5 = this.ParseClass(ref cursor, "AZaz");
                    if (r5 != null)
                    {
                        l0.Add(r5.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 1)
                {
                    r4 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor3;
                }
                if (r4 != null)
                {
                    IParseResult<IList<string>> r6 = null;
                    var startCursor4 = cursor;
                    var l1 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r7 = null;
                        var startCursor5 = cursor;
                        IParseResult<string> r8 = null;
                        r8 = this.ParseLiteral(ref cursor, " ");
                        if (r8 != null)
                        {
                            IParseResult<string> r9 = null;
                            var startCursor6 = cursor;
                            IParseResult<string> r10 = null;
                            r10 = this.keyword(ref cursor);
                            if (r10 == null)
                            {
                                r9 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                            }
                            else
                            {
                                cursor = startCursor6;
                            }
                            if (r9 != null)
                            {
                                IParseResult<IList<string>> r11 = null;
                                var startCursor7 = cursor;
                                var l2 = new List<string>();
                                while (true)
                                {
                                    IParseResult<string> r12 = null;
                                    r12 = this.ParseClass(ref cursor, "AZaz");
                                    if (r12 != null)
                                    {
                                        l2.Add(r12.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                if (l2.Count >= 1)
                                {
                                    r11 = this.ReturnHelper<IList<string>>(startCursor7, ref cursor, state => l2.AsReadOnly());
                                }
                                else
                                {
                                    cursor = startCursor7;
                                }
                                if (r11 != null)
                                {
                                    {
                                        var len = cursor.Location - startCursor5.Location;
                                        r7 = this.ReturnHelper<string>(startCursor5, ref cursor, state =>
                                            state.Subject.Substring(startCursor5.Location, len)
                                            );
                                    }
                                }
                                else
                                {
                                    cursor = startCursor5;
                                }
                            }
                            else
                            {
                                cursor = startCursor5;
                            }
                        }
                        else
                        {
                            cursor = startCursor5;
                        }
                        if (r7 != null)
                        {
                            l1.Add(r7.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r6 = this.ReturnHelper<IList<string>>(startCursor4, ref cursor, state => l1.AsReadOnly());
                    if (r6 != null)
                    {
                        {
                            var len = cursor.Location - startCursor1.Location;
                            r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                                state.Subject.Substring(startCursor1.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            else
            {
                cursor = startCursor1;
            }
            var nameEnd = cursor;
            var name = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<VariableNode>(startCursor0, ref cursor, state =>
                    #line 14 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                                                                                    new VariableNode (name)
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 16 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                        SyntaxNode
            #line default
            > initialize_variable(ref Cursor cursor)
        {
            IParseResult<SyntaxNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            r1 = this.optional_and(ref cursor);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.ParseLiteral(ref cursor, "God said, Let there be");
                if (r2 != null)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this._(ref cursor);
                    if (r3 != null)
                    {
                        IParseResult<VariableNode> r4 = null;
                        var vStart = cursor;
                        r4 = this.variable(ref cursor);
                        var vEnd = cursor;
                        var v = ValueOrDefault(r4);
                        if (r4 != null)
                        {
                            r0 = this.ReturnHelper<SyntaxNode>(startCursor0, ref cursor, state =>
                                #line 16 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                                                                                          new InitializeNode(v)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 18 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
           SyntaxNode
            #line default
            > assign(ref Cursor cursor)
        {
            IParseResult<SyntaxNode> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<IList<string>> r1 = null;
                r1 = this.optional_and(ref cursor);
                if (r1 != null)
                {
                    IParseResult<VariableNode> r2 = null;
                    var vStart = cursor;
                    r2 = this.variable(ref cursor);
                    var vEnd = cursor;
                    var v = ValueOrDefault(r2);
                    if (r2 != null)
                    {
                        IParseResult<IList<string>> r3 = null;
                        r3 = this._(ref cursor);
                        if (r3 != null)
                        {
                            IParseResult<string> r4 = null;
                            r4 = this.ParseLiteral(ref cursor, "shall be");
                            if (r4 != null)
                            {
                                IParseResult<IList<string>> r5 = null;
                                r5 = this._(ref cursor);
                                if (r5 != null)
                                {
                                    IParseResult<SyntaxNode> r6 = null;
                                    var eStart = cursor;
                                    r6 = this.expression(ref cursor);
                                    var eEnd = cursor;
                                    var e = ValueOrDefault(r6);
                                    if (r6 != null)
                                    {
                                        r0 = this.ReturnHelper<SyntaxNode>(startCursor0, ref cursor, state =>
                                            #line 19 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                                                                new AssignNode(v,e)
                                            #line default
                                            );
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<IList<string>> r7 = null;
                r7 = this.optional_and(ref cursor);
                if (r7 != null)
                {
                    IParseResult<string> r8 = null;
                    r8 = this.ParseLiteral(ref cursor, "God spake unto");
                    if (r8 != null)
                    {
                        IParseResult<IList<string>> r9 = null;
                        r9 = this._(ref cursor);
                        if (r9 != null)
                        {
                            IParseResult<VariableNode> r10 = null;
                            var vStart = cursor;
                            r10 = this.variable(ref cursor);
                            var vEnd = cursor;
                            var v = ValueOrDefault(r10);
                            if (r10 != null)
                            {
                                IParseResult<IList<IList<string>>> r11 = null;
                                var startCursor2 = cursor;
                                var l0 = new List<IList<string>>();
                                while (l0.Count < 1)
                                {
                                    IParseResult<IList<string>> r12 = null;
                                    r12 = this._(ref cursor);
                                    if (r12 != null)
                                    {
                                        l0.Add(r12.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                r11 = this.ReturnHelper<IList<IList<string>>>(startCursor2, ref cursor, state => l0.AsReadOnly());
                                if (r11 != null)
                                {
                                    IParseResult<IList<string>> r13 = null;
                                    var startCursor3 = cursor;
                                    var l1 = new List<string>();
                                    while (l1.Count < 1)
                                    {
                                        IParseResult<string> r14 = null;
                                        var startCursor4 = cursor;
                                        IParseResult<string> r15 = null;
                                        r15 = this.ParseLiteral(ref cursor, ":");
                                        if (r15 != null)
                                        {
                                            IParseResult<IList<string>> r16 = null;
                                            r16 = this._(ref cursor);
                                            if (r16 != null)
                                            {
                                                {
                                                    var len = cursor.Location - startCursor4.Location;
                                                    r14 = this.ReturnHelper<string>(startCursor4, ref cursor, state =>
                                                        state.Subject.Substring(startCursor4.Location, len)
                                                        );
                                                }
                                            }
                                            else
                                            {
                                                cursor = startCursor4;
                                            }
                                        }
                                        else
                                        {
                                            cursor = startCursor4;
                                        }
                                        if (r14 != null)
                                        {
                                            l1.Add(r14.Value);
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                    r13 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                                    if (r13 != null)
                                    {
                                        IParseResult<SyntaxNode> r17 = null;
                                        var eStart = cursor;
                                        r17 = this.expression(ref cursor);
                                        var eEnd = cursor;
                                        var e = ValueOrDefault(r17);
                                        if (r17 != null)
                                        {
                                            r0 = this.ReturnHelper<SyntaxNode>(startCursor1, ref cursor, state =>
                                                #line 20 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                                                                                new AssignNode(v,e)
                                                #line default
                                                );
                                        }
                                        else
                                        {
                                            cursor = startCursor1;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor1;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor1;
                                }
                            }
                            else
                            {
                                cursor = startCursor1;
                            }
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                var startCursor5 = cursor;
                IParseResult<IList<string>> r18 = null;
                r18 = this.optional_and(ref cursor);
                if (r18 != null)
                {
                    IParseResult<string> r19 = null;
                    r19 = this.ParseLiteral(ref cursor, "God spoke to");
                    if (r19 != null)
                    {
                        IParseResult<IList<string>> r20 = null;
                        r20 = this._(ref cursor);
                        if (r20 != null)
                        {
                            IParseResult<VariableNode> r21 = null;
                            var vStart = cursor;
                            r21 = this.variable(ref cursor);
                            var vEnd = cursor;
                            var v = ValueOrDefault(r21);
                            if (r21 != null)
                            {
                                IParseResult<IList<IList<string>>> r22 = null;
                                var startCursor6 = cursor;
                                var l2 = new List<IList<string>>();
                                while (l2.Count < 1)
                                {
                                    IParseResult<IList<string>> r23 = null;
                                    r23 = this._(ref cursor);
                                    if (r23 != null)
                                    {
                                        l2.Add(r23.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                r22 = this.ReturnHelper<IList<IList<string>>>(startCursor6, ref cursor, state => l2.AsReadOnly());
                                if (r22 != null)
                                {
                                    IParseResult<IList<string>> r24 = null;
                                    var startCursor7 = cursor;
                                    var l3 = new List<string>();
                                    while (l3.Count < 1)
                                    {
                                        IParseResult<string> r25 = null;
                                        var startCursor8 = cursor;
                                        IParseResult<string> r26 = null;
                                        r26 = this.ParseLiteral(ref cursor, ":");
                                        if (r26 != null)
                                        {
                                            IParseResult<IList<string>> r27 = null;
                                            r27 = this._(ref cursor);
                                            if (r27 != null)
                                            {
                                                {
                                                    var len = cursor.Location - startCursor8.Location;
                                                    r25 = this.ReturnHelper<string>(startCursor8, ref cursor, state =>
                                                        state.Subject.Substring(startCursor8.Location, len)
                                                        );
                                                }
                                            }
                                            else
                                            {
                                                cursor = startCursor8;
                                            }
                                        }
                                        else
                                        {
                                            cursor = startCursor8;
                                        }
                                        if (r25 != null)
                                        {
                                            l3.Add(r25.Value);
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                    r24 = this.ReturnHelper<IList<string>>(startCursor7, ref cursor, state => l3.AsReadOnly());
                                    if (r24 != null)
                                    {
                                        IParseResult<SyntaxNode> r28 = null;
                                        var eStart = cursor;
                                        r28 = this.expression(ref cursor);
                                        var eEnd = cursor;
                                        var e = ValueOrDefault(r28);
                                        if (r28 != null)
                                        {
                                            r0 = this.ReturnHelper<SyntaxNode>(startCursor5, ref cursor, state =>
                                                #line 21 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                                                                              new AssignNode(v,e)
                                                #line default
                                                );
                                        }
                                        else
                                        {
                                            cursor = startCursor5;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor5;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor5;
                                }
                            }
                            else
                            {
                                cursor = startCursor5;
                            }
                        }
                        else
                        {
                            cursor = startCursor5;
                        }
                    }
                    else
                    {
                        cursor = startCursor5;
                    }
                }
                else
                {
                    cursor = startCursor5;
                }
            }
            if (r0 == null)
            {
                var startCursor9 = cursor;
                IParseResult<SyntaxNode> r29 = null;
                var eStart = cursor;
                r29 = this.expression(ref cursor);
                var eEnd = cursor;
                var e = ValueOrDefault(r29);
                if (r29 != null)
                {
                    IParseResult<IList<string>> r30 = null;
                    r30 = this._(ref cursor);
                    if (r30 != null)
                    {
                        IParseResult<string> r31 = null;
                        r31 = this.ParseLiteral(ref cursor, "and giveth to");
                        if (r31 != null)
                        {
                            IParseResult<IList<string>> r32 = null;
                            r32 = this._(ref cursor);
                            if (r32 != null)
                            {
                                IParseResult<VariableNode> r33 = null;
                                var vStart = cursor;
                                r33 = this.variable(ref cursor);
                                var vEnd = cursor;
                                var v = ValueOrDefault(r33);
                                if (r33 != null)
                                {
                                    r0 = this.ReturnHelper<SyntaxNode>(startCursor9, ref cursor, state =>
                                        #line 22 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                                                        new AssignNode(v,e)
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor9;
                                }
                            }
                            else
                            {
                                cursor = startCursor9;
                            }
                        }
                        else
                        {
                            cursor = startCursor9;
                        }
                    }
                    else
                    {
                        cursor = startCursor9;
                    }
                }
                else
                {
                    cursor = startCursor9;
                }
            }
            if (r0 == null)
            {
                var startCursor10 = cursor;
                IParseResult<SyntaxNode> r34 = null;
                var sStart = cursor;
                r34 = this.subtraction(ref cursor);
                var sEnd = cursor;
                var s = ValueOrDefault(r34);
                if (r34 != null)
                {
                    IParseResult<IList<string>> r35 = null;
                    r35 = this._(ref cursor);
                    if (r35 != null)
                    {
                        IParseResult<string> r36 = null;
                        r36 = this.ParseLiteral(ref cursor, "and giveth the rest to");
                        if (r36 != null)
                        {
                            IParseResult<IList<string>> r37 = null;
                            r37 = this._(ref cursor);
                            if (r37 != null)
                            {
                                IParseResult<VariableNode> r38 = null;
                                var vStart = cursor;
                                r38 = this.variable(ref cursor);
                                var vEnd = cursor;
                                var v = ValueOrDefault(r38);
                                if (r38 != null)
                                {
                                    r0 = this.ReturnHelper<SyntaxNode>(startCursor10, ref cursor, state =>
                                        #line 23 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                                                                  new AssignNode(v,s)
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor10;
                                }
                            }
                            else
                            {
                                cursor = startCursor10;
                            }
                        }
                        else
                        {
                            cursor = startCursor10;
                        }
                    }
                    else
                    {
                        cursor = startCursor10;
                    }
                }
                else
                {
                    cursor = startCursor10;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 25 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
           SyntaxNode
            #line default
            > lookup(ref Cursor cursor)
        {
            IParseResult<SyntaxNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<VariableNode> r1 = null;
            var vStart = cursor;
            r1 = this.variable(ref cursor);
            var vEnd = cursor;
            var v = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<SyntaxNode>(startCursor0, ref cursor, state =>
                    #line 25 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                                      new LookupNode(v)
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 29 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
           SyntaxNode
            #line default
            > number(ref Cursor cursor)
        {
            IParseResult<SyntaxNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            if (r1 == null)
            {
                r1 = this.ParseLiteral(ref cursor, "the value of");
            }
            if (r1 == null)
            {
                r1 = this.ParseLiteral(ref cursor, "the worth of");
            }
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this._(ref cursor);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    var nStart = cursor;
                    var startCursor1 = cursor;
                    IParseResult<string> r4 = null;
                    var startCursor2 = cursor;
                    IParseResult<string> r5 = null;
                    r5 = this.keyword(ref cursor);
                    if (r5 == null)
                    {
                        r4 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                    if (r4 != null)
                    {
                        IParseResult<IList<string>> r6 = null;
                        var startCursor3 = cursor;
                        var l0 = new List<string>();
                        while (true)
                        {
                            IParseResult<string> r7 = null;
                            r7 = this.ParseClass(ref cursor, "AZaz");
                            if (r7 != null)
                            {
                                l0.Add(r7.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        if (l0.Count >= 1)
                        {
                            r6 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l0.AsReadOnly());
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                        if (r6 != null)
                        {
                            IParseResult<IList<string>> r8 = null;
                            var startCursor4 = cursor;
                            var l1 = new List<string>();
                            while (true)
                            {
                                IParseResult<string> r9 = null;
                                var startCursor5 = cursor;
                                IParseResult<string> r10 = null;
                                r10 = this.ParseLiteral(ref cursor, " ");
                                if (r10 != null)
                                {
                                    IParseResult<string> r11 = null;
                                    var startCursor6 = cursor;
                                    IParseResult<string> r12 = null;
                                    r12 = this.keyword(ref cursor);
                                    if (r12 == null)
                                    {
                                        r11 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                                    }
                                    else
                                    {
                                        cursor = startCursor6;
                                    }
                                    if (r11 != null)
                                    {
                                        IParseResult<IList<string>> r13 = null;
                                        var startCursor7 = cursor;
                                        var l2 = new List<string>();
                                        while (true)
                                        {
                                            IParseResult<string> r14 = null;
                                            r14 = this.ParseClass(ref cursor, "AZaz");
                                            if (r14 != null)
                                            {
                                                l2.Add(r14.Value);
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                        if (l2.Count >= 1)
                                        {
                                            r13 = this.ReturnHelper<IList<string>>(startCursor7, ref cursor, state => l2.AsReadOnly());
                                        }
                                        else
                                        {
                                            cursor = startCursor7;
                                        }
                                        if (r13 != null)
                                        {
                                            {
                                                var len = cursor.Location - startCursor5.Location;
                                                r9 = this.ReturnHelper<string>(startCursor5, ref cursor, state =>
                                                    state.Subject.Substring(startCursor5.Location, len)
                                                    );
                                            }
                                        }
                                        else
                                        {
                                            cursor = startCursor5;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor5;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor5;
                                }
                                if (r9 != null)
                                {
                                    l1.Add(r9.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            r8 = this.ReturnHelper<IList<string>>(startCursor4, ref cursor, state => l1.AsReadOnly());
                            if (r8 != null)
                            {
                                {
                                    var len = cursor.Location - startCursor1.Location;
                                    r3 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                                        state.Subject.Substring(startCursor1.Location, len)
                                        );
                                }
                            }
                            else
                            {
                                cursor = startCursor1;
                            }
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                    var nEnd = cursor;
                    var n = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper<SyntaxNode>(startCursor0, ref cursor, state =>
                            #line 30 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                                                                                               new NumberNode(n)
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 32 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
           SyntaxNode
            #line default
            > @string(ref Cursor cursor)
        {
            IParseResult<SyntaxNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            if (r1 == null)
            {
                r1 = this.ParseLiteral(ref cursor, "the holy word");
            }
            if (r1 == null)
            {
                r1 = this.ParseLiteral(ref cursor, "the holy text");
            }
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (l0.Count < 1)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.ParseLiteral(ref cursor, "s");
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.ParseLiteral(ref cursor, ":");
                    if (r4 != null)
                    {
                        IParseResult<IList<string>> r5 = null;
                        r5 = this._(ref cursor);
                        if (r5 != null)
                        {
                            IParseResult<string> r6 = null;
                            var sStart = cursor;
                            var startCursor2 = cursor;
                            IParseResult<IList<string>> r7 = null;
                            var startCursor3 = cursor;
                            var l1 = new List<string>();
                            while (true)
                            {
                                IParseResult<string> r8 = null;
                                r8 = this.chars(ref cursor);
                                if (r8 != null)
                                {
                                    l1.Add(r8.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            if (l1.Count >= 1)
                            {
                                r7 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                            }
                            else
                            {
                                cursor = startCursor3;
                            }
                            if (r7 != null)
                            {
                                {
                                    var len = cursor.Location - startCursor2.Location;
                                    r6 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                                        state.Subject.Substring(startCursor2.Location, len)
                                        );
                                }
                            }
                            else
                            {
                                cursor = startCursor2;
                            }
                            var sEnd = cursor;
                            var s = ValueOrDefault(r6);
                            if (r6 != null)
                            {
                                r0 = this.ReturnHelper<SyntaxNode>(startCursor0, ref cursor, state =>
                                    #line 33 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                                                                      new StringNode(s)
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 36 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
            SyntaxNode
            #line default
            > boolean(ref Cursor cursor)
        {
            IParseResult<SyntaxNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var bStart = cursor;
            if (r1 == null)
            {
                r1 = this.ParseLiteral(ref cursor, "Thou shalt not");
            }
            if (r1 == null)
            {
                r1 = this.ParseLiteral(ref cursor, "Thou shalt");
            }
            var bEnd = cursor;
            var b = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this._(ref cursor);
                if (r2 != null)
                {
                    IParseResult<IList<string>> r3 = null;
                    var startCursor1 = cursor;
                    var l0 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.ParseClass(ref cursor, "AZaz  ");
                        if (r4 != null)
                        {
                            l0.Add(r4.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l0.Count >= 1)
                    {
                        r3 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper<SyntaxNode>(startCursor0, ref cursor, state =>
                            #line 36 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                                                                          new BooleanNode(b)
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 40 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                 SyntaxNode
            #line default
            > if_statement(ref Cursor cursor)
        {
            IParseResult<SyntaxNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            r1 = this.optional_and(ref cursor);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.ParseLiteral(ref cursor, "when");
                if (r2 != null)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this._(ref cursor);
                    if (r3 != null)
                    {
                        IParseResult<SyntaxNode> r4 = null;
                        var iStart = cursor;
                        if (r4 == null)
                        {
                            r4 = this.comparison(ref cursor);
                        }
                        if (r4 == null)
                        {
                            r4 = this.lookup(ref cursor);
                        }
                        var iEnd = cursor;
                        var i = ValueOrDefault(r4);
                        if (r4 != null)
                        {
                            IParseResult<string> r5 = null;
                            r5 = this.EOL(ref cursor);
                            if (r5 != null)
                            {
                                IParseResult<BlockNode> r6 = null;
                                var truebodyStart = cursor;
                                r6 = this.block(ref cursor);
                                var truebodyEnd = cursor;
                                var truebody = ValueOrDefault(r6);
                                if (r6 != null)
                                {
                                    IParseResult<string> r7 = null;
                                    r7 = this.EOL(ref cursor);
                                    if (r7 != null)
                                    {
                                        r0 = this.ReturnHelper<SyntaxNode>(startCursor0, ref cursor, state =>
                                            #line 41 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
             new IfStatementNode(i,truebody)
                                            #line default
                                            );
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 43 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                      SyntaxNode
            #line default
            > if_else_statement(ref Cursor cursor)
        {
            IParseResult<SyntaxNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            r1 = this.optional_and(ref cursor);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.ParseLiteral(ref cursor, "When");
                if (r2 != null)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this._(ref cursor);
                    if (r3 != null)
                    {
                        IParseResult<SyntaxNode> r4 = null;
                        var iStart = cursor;
                        if (r4 == null)
                        {
                            r4 = this.comparison(ref cursor);
                        }
                        if (r4 == null)
                        {
                            r4 = this.lookup(ref cursor);
                        }
                        var iEnd = cursor;
                        var i = ValueOrDefault(r4);
                        if (r4 != null)
                        {
                            IParseResult<string> r5 = null;
                            r5 = this.EOL(ref cursor);
                            if (r5 != null)
                            {
                                IParseResult<BlockNode> r6 = null;
                                var truebodyStart = cursor;
                                r6 = this.block(ref cursor);
                                var truebodyEnd = cursor;
                                var truebody = ValueOrDefault(r6);
                                if (r6 != null)
                                {
                                    IParseResult<string> r7 = null;
                                    r7 = this.EOL(ref cursor);
                                    if (r7 != null)
                                    {
                                        IParseResult<string> r8 = null;
                                        r8 = this.ParseLiteral(ref cursor, "Otherwise");
                                        if (r8 != null)
                                        {
                                            IParseResult<string> r9 = null;
                                            r9 = this.EOL(ref cursor);
                                            if (r9 != null)
                                            {
                                                IParseResult<BlockNode> r10 = null;
                                                var falsebodyStart = cursor;
                                                r10 = this.block(ref cursor);
                                                var falsebodyEnd = cursor;
                                                var falsebody = ValueOrDefault(r10);
                                                if (r10 != null)
                                                {
                                                    IParseResult<string> r11 = null;
                                                    r11 = this.EOL(ref cursor);
                                                    if (r11 != null)
                                                    {
                                                        r0 = this.ReturnHelper<SyntaxNode>(startCursor0, ref cursor, state =>
                                                            #line 44 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
             new IfElseStatementNode(i,truebody,falsebody)
                                                            #line default
                                                            );
                                                    }
                                                    else
                                                    {
                                                        cursor = startCursor0;
                                                    }
                                                }
                                                else
                                                {
                                                    cursor = startCursor0;
                                                }
                                            }
                                            else
                                            {
                                                cursor = startCursor0;
                                            }
                                        }
                                        else
                                        {
                                            cursor = startCursor0;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 48 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
               SyntaxNode
            #line default
            > until_loop(ref Cursor cursor)
        {
            IParseResult<SyntaxNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            r1 = this.optional_and(ref cursor);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.ParseLiteral(ref cursor, "Until");
                if (r2 != null)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this._(ref cursor);
                    if (r3 != null)
                    {
                        IParseResult<SyntaxNode> r4 = null;
                        var iStart = cursor;
                        if (r4 == null)
                        {
                            r4 = this.comparison(ref cursor);
                        }
                        if (r4 == null)
                        {
                            r4 = this.lookup(ref cursor);
                        }
                        var iEnd = cursor;
                        var i = ValueOrDefault(r4);
                        if (r4 != null)
                        {
                            IParseResult<string> r5 = null;
                            r5 = this.EOL(ref cursor);
                            if (r5 != null)
                            {
                                IParseResult<BlockNode> r6 = null;
                                var bodyStart = cursor;
                                r6 = this.block(ref cursor);
                                var bodyEnd = cursor;
                                var body = ValueOrDefault(r6);
                                if (r6 != null)
                                {
                                    IParseResult<string> r7 = null;
                                    r7 = this.EOL(ref cursor);
                                    if (r7 != null)
                                    {
                                        r0 = this.ReturnHelper<SyntaxNode>(startCursor0, ref cursor, state =>
                                            #line 49 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
             new UntilNode(i,body)
                                            #line default
                                            );
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 54 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
           OutputNode
            #line default
            > output(ref Cursor cursor)
        {
            IParseResult<OutputNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Speak the name of the Lord");
            if (r1 != null)
            {
                r0 = this.ReturnHelper<OutputNode>(startCursor0, ref cursor, state =>
                    #line 54 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                                                       new OutputNode()
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 58 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
               SyntaxNode
            #line default
            > comparison(ref Cursor cursor)
        {
            IParseResult<SyntaxNode> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<SyntaxNode> r1 = null;
                var lStart = cursor;
                if (r1 == null)
                {
                    r1 = this.lookup(ref cursor);
                }
                if (r1 == null)
                {
                    r1 = this.number(ref cursor);
                }
                var lEnd = cursor;
                var l = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<IList<string>> r2 = null;
                    r2 = this._(ref cursor);
                    if (r2 != null)
                    {
                        IParseResult<IList<string>> r3 = null;
                        r3 = this.optional_is(ref cursor);
                        if (r3 != null)
                        {
                            IParseResult<string> r4 = null;
                            r4 = this.ParseLiteral(ref cursor, "blessed by");
                            if (r4 != null)
                            {
                                IParseResult<IList<string>> r5 = null;
                                r5 = this._(ref cursor);
                                if (r5 != null)
                                {
                                    IParseResult<SyntaxNode> r6 = null;
                                    var rStart = cursor;
                                    if (r6 == null)
                                    {
                                        r6 = this.number(ref cursor);
                                    }
                                    if (r6 == null)
                                    {
                                        r6 = this.lookup(ref cursor);
                                    }
                                    var rEnd = cursor;
                                    var r = ValueOrDefault(r6);
                                    if (r6 != null)
                                    {
                                        r0 = this.ReturnHelper<SyntaxNode>(startCursor0, ref cursor, state =>
                                            #line 59 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                                                                           new EqualsNode(l,r)
                                            #line default
                                            );
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<SyntaxNode> r7 = null;
                var lStart = cursor;
                if (r7 == null)
                {
                    r7 = this.lookup(ref cursor);
                }
                if (r7 == null)
                {
                    r7 = this.number(ref cursor);
                }
                var lEnd = cursor;
                var l = ValueOrDefault(r7);
                if (r7 != null)
                {
                    IParseResult<IList<string>> r8 = null;
                    r8 = this._(ref cursor);
                    if (r8 != null)
                    {
                        IParseResult<IList<string>> r9 = null;
                        r9 = this.optional_is(ref cursor);
                        if (r9 != null)
                        {
                            IParseResult<string> r10 = null;
                            r10 = this.ParseLiteral(ref cursor, "cursed by");
                            if (r10 != null)
                            {
                                IParseResult<IList<string>> r11 = null;
                                r11 = this._(ref cursor);
                                if (r11 != null)
                                {
                                    IParseResult<SyntaxNode> r12 = null;
                                    var rStart = cursor;
                                    if (r12 == null)
                                    {
                                        r12 = this.number(ref cursor);
                                    }
                                    if (r12 == null)
                                    {
                                        r12 = this.lookup(ref cursor);
                                    }
                                    var rEnd = cursor;
                                    var r = ValueOrDefault(r12);
                                    if (r12 != null)
                                    {
                                        r0 = this.ReturnHelper<SyntaxNode>(startCursor1, ref cursor, state =>
                                            #line 60 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                                                                          new NotEqualsNode(l,r)
                                            #line default
                                            );
                                    }
                                    else
                                    {
                                        cursor = startCursor1;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor1;
                                }
                            }
                            else
                            {
                                cursor = startCursor1;
                            }
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<SyntaxNode> r13 = null;
                var lStart = cursor;
                if (r13 == null)
                {
                    r13 = this.lookup(ref cursor);
                }
                if (r13 == null)
                {
                    r13 = this.number(ref cursor);
                }
                var lEnd = cursor;
                var l = ValueOrDefault(r13);
                if (r13 != null)
                {
                    IParseResult<IList<string>> r14 = null;
                    r14 = this._(ref cursor);
                    if (r14 != null)
                    {
                        IParseResult<IList<string>> r15 = null;
                        r15 = this.optional_is(ref cursor);
                        if (r15 != null)
                        {
                            IParseResult<string> r16 = null;
                            r16 = this.ParseLiteral(ref cursor, "holier than");
                            if (r16 != null)
                            {
                                IParseResult<IList<string>> r17 = null;
                                r17 = this._(ref cursor);
                                if (r17 != null)
                                {
                                    IParseResult<SyntaxNode> r18 = null;
                                    var rStart = cursor;
                                    if (r18 == null)
                                    {
                                        r18 = this.number(ref cursor);
                                    }
                                    if (r18 == null)
                                    {
                                        r18 = this.lookup(ref cursor);
                                    }
                                    var rEnd = cursor;
                                    var r = ValueOrDefault(r18);
                                    if (r18 != null)
                                    {
                                        r0 = this.ReturnHelper<SyntaxNode>(startCursor2, ref cursor, state =>
                                            #line 61 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                                                                            new GreaterThanNode(l,r)
                                            #line default
                                            );
                                    }
                                    else
                                    {
                                        cursor = startCursor2;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor2;
                                }
                            }
                            else
                            {
                                cursor = startCursor2;
                            }
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            if (r0 == null)
            {
                var startCursor3 = cursor;
                IParseResult<SyntaxNode> r19 = null;
                var lStart = cursor;
                if (r19 == null)
                {
                    r19 = this.lookup(ref cursor);
                }
                if (r19 == null)
                {
                    r19 = this.number(ref cursor);
                }
                var lEnd = cursor;
                var l = ValueOrDefault(r19);
                if (r19 != null)
                {
                    IParseResult<IList<string>> r20 = null;
                    r20 = this._(ref cursor);
                    if (r20 != null)
                    {
                        IParseResult<IList<string>> r21 = null;
                        r21 = this.optional_is(ref cursor);
                        if (r21 != null)
                        {
                            IParseResult<string> r22 = null;
                            r22 = this.ParseLiteral(ref cursor, "unholier than");
                            if (r22 != null)
                            {
                                IParseResult<IList<string>> r23 = null;
                                r23 = this._(ref cursor);
                                if (r23 != null)
                                {
                                    IParseResult<SyntaxNode> r24 = null;
                                    var rStart = cursor;
                                    if (r24 == null)
                                    {
                                        r24 = this.number(ref cursor);
                                    }
                                    if (r24 == null)
                                    {
                                        r24 = this.lookup(ref cursor);
                                    }
                                    var rEnd = cursor;
                                    var r = ValueOrDefault(r24);
                                    if (r24 != null)
                                    {
                                        r0 = this.ReturnHelper<SyntaxNode>(startCursor3, ref cursor, state =>
                                            #line 62 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                                                                              new LessThanNode(l,r)
                                            #line default
                                            );
                                    }
                                    else
                                    {
                                        cursor = startCursor3;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor3;
                                }
                            }
                            else
                            {
                                cursor = startCursor3;
                            }
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                }
                else
                {
                    cursor = startCursor3;
                }
            }
            if (r0 == null)
            {
                var startCursor4 = cursor;
                IParseResult<SyntaxNode> r25 = null;
                var lStart = cursor;
                if (r25 == null)
                {
                    r25 = this.lookup(ref cursor);
                }
                if (r25 == null)
                {
                    r25 = this.number(ref cursor);
                }
                var lEnd = cursor;
                var l = ValueOrDefault(r25);
                if (r25 != null)
                {
                    IParseResult<IList<string>> r26 = null;
                    r26 = this._(ref cursor);
                    if (r26 != null)
                    {
                        IParseResult<IList<string>> r27 = null;
                        r27 = this.optional_is(ref cursor);
                        if (r27 != null)
                        {
                            IParseResult<string> r28 = null;
                            r28 = this.ParseLiteral(ref cursor, "as holy as");
                            if (r28 != null)
                            {
                                IParseResult<IList<string>> r29 = null;
                                r29 = this._(ref cursor);
                                if (r29 != null)
                                {
                                    IParseResult<SyntaxNode> r30 = null;
                                    var rStart = cursor;
                                    if (r30 == null)
                                    {
                                        r30 = this.number(ref cursor);
                                    }
                                    if (r30 == null)
                                    {
                                        r30 = this.lookup(ref cursor);
                                    }
                                    var rEnd = cursor;
                                    var r = ValueOrDefault(r30);
                                    if (r30 != null)
                                    {
                                        r0 = this.ReturnHelper<SyntaxNode>(startCursor4, ref cursor, state =>
                                            #line 63 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                                                                           new GreaterOrEqualNode(l,r)
                                            #line default
                                            );
                                    }
                                    else
                                    {
                                        cursor = startCursor4;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor4;
                                }
                            }
                            else
                            {
                                cursor = startCursor4;
                            }
                        }
                        else
                        {
                            cursor = startCursor4;
                        }
                    }
                    else
                    {
                        cursor = startCursor4;
                    }
                }
                else
                {
                    cursor = startCursor4;
                }
            }
            if (r0 == null)
            {
                var startCursor5 = cursor;
                IParseResult<SyntaxNode> r31 = null;
                var lStart = cursor;
                if (r31 == null)
                {
                    r31 = this.lookup(ref cursor);
                }
                if (r31 == null)
                {
                    r31 = this.number(ref cursor);
                }
                var lEnd = cursor;
                var l = ValueOrDefault(r31);
                if (r31 != null)
                {
                    IParseResult<IList<string>> r32 = null;
                    r32 = this._(ref cursor);
                    if (r32 != null)
                    {
                        IParseResult<IList<string>> r33 = null;
                        r33 = this.optional_is(ref cursor);
                        if (r33 != null)
                        {
                            IParseResult<string> r34 = null;
                            r34 = this.ParseLiteral(ref cursor, "as unholy as");
                            if (r34 != null)
                            {
                                IParseResult<IList<string>> r35 = null;
                                r35 = this._(ref cursor);
                                if (r35 != null)
                                {
                                    IParseResult<SyntaxNode> r36 = null;
                                    var rStart = cursor;
                                    if (r36 == null)
                                    {
                                        r36 = this.number(ref cursor);
                                    }
                                    if (r36 == null)
                                    {
                                        r36 = this.lookup(ref cursor);
                                    }
                                    var rEnd = cursor;
                                    var r = ValueOrDefault(r36);
                                    if (r36 != null)
                                    {
                                        r0 = this.ReturnHelper<SyntaxNode>(startCursor5, ref cursor, state =>
                                            #line 64 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                                                                             new LessOrEqualNode(l,r)
                                            #line default
                                            );
                                    }
                                    else
                                    {
                                        cursor = startCursor5;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor5;
                                }
                            }
                            else
                            {
                                cursor = startCursor5;
                            }
                        }
                        else
                        {
                            cursor = startCursor5;
                        }
                    }
                    else
                    {
                        cursor = startCursor5;
                    }
                }
                else
                {
                    cursor = startCursor5;
                }
            }
            if (r0 == null)
            {
                var startCursor6 = cursor;
                IParseResult<string> r37 = null;
                r37 = this.ParseLiteral(ref cursor, "the opposite of");
                if (r37 != null)
                {
                    IParseResult<IList<string>> r38 = null;
                    r38 = this._(ref cursor);
                    if (r38 != null)
                    {
                        IParseResult<SyntaxNode> r39 = null;
                        var lStart = cursor;
                        if (r39 == null)
                        {
                            r39 = this.lookup(ref cursor);
                        }
                        if (r39 == null)
                        {
                            r39 = this.number(ref cursor);
                        }
                        var lEnd = cursor;
                        var l = ValueOrDefault(r39);
                        if (r39 != null)
                        {
                            r0 = this.ReturnHelper<SyntaxNode>(startCursor6, ref cursor, state =>
                                #line 65 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                                                  new NotNode(l)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor6;
                        }
                    }
                    else
                    {
                        cursor = startCursor6;
                    }
                }
                else
                {
                    cursor = startCursor6;
                }
            }
            return r0;
        }

        private IParseResult<SyntaxNode> statement(ref Cursor cursor)
        {
            IParseResult<SyntaxNode> r0 = null;
            if (r0 == null)
            {
                r0 = this.initialize_variable(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.assign(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.output(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.if_else_statement(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.if_statement(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.until_loop(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.arithmetic(ref cursor);
            }
            return r0;
        }

        private IParseResult<string> keyword(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "shall be");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "Otherwise");
            }
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "the holy word");
                if (r1 != null)
                {
                    IParseResult<IList<string>> r2 = null;
                    var startCursor1 = cursor;
                    var l0 = new List<string>();
                    while (l0.Count < 1)
                    {
                        IParseResult<string> r3 = null;
                        r3 = this.ParseLiteral(ref cursor, "s");
                        if (r3 != null)
                        {
                            l0.Add(r3.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r2 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                    if (r2 != null)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.ParseLiteral(ref cursor, ":");
                        if (r4 != null)
                        {
                            {
                                var len = cursor.Location - startCursor0.Location;
                                r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                    state.Subject.Substring(startCursor0.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<string> r5 = null;
                r5 = this.ParseLiteral(ref cursor, "the holy text");
                if (r5 != null)
                {
                    IParseResult<IList<string>> r6 = null;
                    var startCursor3 = cursor;
                    var l1 = new List<string>();
                    while (l1.Count < 1)
                    {
                        IParseResult<string> r7 = null;
                        r7 = this.ParseLiteral(ref cursor, "s");
                        if (r7 != null)
                        {
                            l1.Add(r7.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r6 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                    if (r6 != null)
                    {
                        IParseResult<string> r8 = null;
                        r8 = this.ParseLiteral(ref cursor, ":");
                        if (r8 != null)
                        {
                            {
                                var len = cursor.Location - startCursor2.Location;
                                r0 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                                    state.Subject.Substring(startCursor2.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "Thou shalt");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "Thou shalt not");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "and");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "Take ye the sum of");
            }
            if (r0 == null)
            {
                var startCursor4 = cursor;
                IParseResult<string> r9 = null;
                r9 = this.ParseLiteral(ref cursor, "the holy word");
                if (r9 != null)
                {
                    IParseResult<IList<string>> r10 = null;
                    var startCursor5 = cursor;
                    var l2 = new List<string>();
                    while (l2.Count < 1)
                    {
                        IParseResult<string> r11 = null;
                        r11 = this.ParseLiteral(ref cursor, "s");
                        if (r11 != null)
                        {
                            l2.Add(r11.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r10 = this.ReturnHelper<IList<string>>(startCursor5, ref cursor, state => l2.AsReadOnly());
                    if (r10 != null)
                    {
                        IParseResult<string> r12 = null;
                        r12 = this.ParseLiteral(ref cursor, ":");
                        if (r12 != null)
                        {
                            {
                                var len = cursor.Location - startCursor4.Location;
                                r0 = this.ReturnHelper<string>(startCursor4, ref cursor, state =>
                                    state.Subject.Substring(startCursor4.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor4;
                        }
                    }
                    else
                    {
                        cursor = startCursor4;
                    }
                }
                else
                {
                    cursor = startCursor4;
                }
            }
            if (r0 == null)
            {
                var startCursor6 = cursor;
                IParseResult<string> r13 = null;
                r13 = this.ParseLiteral(ref cursor, "the holy text");
                if (r13 != null)
                {
                    IParseResult<IList<string>> r14 = null;
                    var startCursor7 = cursor;
                    var l3 = new List<string>();
                    while (l3.Count < 1)
                    {
                        IParseResult<string> r15 = null;
                        r15 = this.ParseLiteral(ref cursor, "s");
                        if (r15 != null)
                        {
                            l3.Add(r15.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r14 = this.ReturnHelper<IList<string>>(startCursor7, ref cursor, state => l3.AsReadOnly());
                    if (r14 != null)
                    {
                        IParseResult<string> r16 = null;
                        r16 = this.ParseLiteral(ref cursor, ":");
                        if (r16 != null)
                        {
                            {
                                var len = cursor.Location - startCursor6.Location;
                                r0 = this.ReturnHelper<string>(startCursor6, ref cursor, state =>
                                    state.Subject.Substring(startCursor6.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor6;
                        }
                    }
                    else
                    {
                        cursor = startCursor6;
                    }
                }
                else
                {
                    cursor = startCursor6;
                }
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "into");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "by");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "from");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "divide");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "blessed by");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "cursed by");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "holier than");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "as holy as");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "as unholy as");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "is");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "the worth of");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "the opposite of");
            }
            return r0;
        }

        private IParseResult<
            #line 101 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
           SyntaxNode
            #line default
            > expression(ref Cursor cursor)
        {
            IParseResult<SyntaxNode> r0 = null;
            if (r0 == null)
            {
                r0 = this.number(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.lookup(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.boolean(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.@string(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.arithmetic(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.comparison(ref cursor);
            }
            return r0;
        }

        private IParseResult<
            #line 109 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
           SyntaxNode
            #line default
            > arithmetic(ref Cursor cursor)
        {
            IParseResult<SyntaxNode> r0 = null;
            if (r0 == null)
            {
                r0 = this.addition(ref cursor);
            }
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "bless");
                if (r1 != null)
                {
                    IParseResult<IList<string>> r2 = null;
                    r2 = this._(ref cursor);
                    if (r2 != null)
                    {
                        IParseResult<VariableNode> r3 = null;
                        var lStart = cursor;
                        r3 = this.variable(ref cursor);
                        var lEnd = cursor;
                        var l = ValueOrDefault(r3);
                        if (r3 != null)
                        {
                            r0 = this.ReturnHelper<SyntaxNode>(startCursor0, ref cursor, state =>
                                #line 111 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                             new IncrementNode(l)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                r0 = this.subtraction(ref cursor);
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r4 = null;
                r4 = this.ParseLiteral(ref cursor, "curse");
                if (r4 != null)
                {
                    IParseResult<IList<string>> r5 = null;
                    r5 = this._(ref cursor);
                    if (r5 != null)
                    {
                        IParseResult<VariableNode> r6 = null;
                        var lStart = cursor;
                        r6 = this.variable(ref cursor);
                        var lEnd = cursor;
                        var l = ValueOrDefault(r6);
                        if (r6 != null)
                        {
                            r0 = this.ReturnHelper<SyntaxNode>(startCursor1, ref cursor, state =>
                                #line 113 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                             new DecrementNode(l)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                r0 = this.division(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.multiplication(ref cursor);
            }
            return r0;
        }

        private IParseResult<
            #line 117 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
         SyntaxNode
            #line default
            > addition(ref Cursor cursor)
        {
            IParseResult<SyntaxNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Take ye the sum of");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this._(ref cursor);
                if (r2 != null)
                {
                    IParseResult<SyntaxNode> r3 = null;
                    var lStart = cursor;
                    if (r3 == null)
                    {
                        r3 = this.number(ref cursor);
                    }
                    if (r3 == null)
                    {
                        r3 = this.lookup(ref cursor);
                    }
                    var lEnd = cursor;
                    var l = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        IParseResult<IList<string>> r4 = null;
                        r4 = this._(ref cursor);
                        if (r4 != null)
                        {
                            IParseResult<string> r5 = null;
                            r5 = this.ParseLiteral(ref cursor, "and");
                            if (r5 != null)
                            {
                                IParseResult<IList<string>> r6 = null;
                                r6 = this._(ref cursor);
                                if (r6 != null)
                                {
                                    IParseResult<SyntaxNode> r7 = null;
                                    var rStart = cursor;
                                    if (r7 == null)
                                    {
                                        r7 = this.number(ref cursor);
                                    }
                                    if (r7 == null)
                                    {
                                        r7 = this.lookup(ref cursor);
                                    }
                                    var rEnd = cursor;
                                    var r = ValueOrDefault(r7);
                                    if (r7 != null)
                                    {
                                        r0 = this.ReturnHelper<SyntaxNode>(startCursor0, ref cursor, state =>
                                            #line 117 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                                                                                              new AdditionNode(l,r)
                                            #line default
                                            );
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 118 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
            SyntaxNode
            #line default
            > subtraction(ref Cursor cursor)
        {
            IParseResult<SyntaxNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            r1 = this.optional_and(ref cursor);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.ParseLiteral(ref cursor, "God taketh away");
                if (r2 != null)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this._(ref cursor);
                    if (r3 != null)
                    {
                        IParseResult<SyntaxNode> r4 = null;
                        var aStart = cursor;
                        if (r4 == null)
                        {
                            r4 = this.number(ref cursor);
                        }
                        if (r4 == null)
                        {
                            r4 = this.lookup(ref cursor);
                        }
                        var aEnd = cursor;
                        var a = ValueOrDefault(r4);
                        if (r4 != null)
                        {
                            IParseResult<IList<string>> r5 = null;
                            r5 = this._(ref cursor);
                            if (r5 != null)
                            {
                                IParseResult<string> r6 = null;
                                r6 = this.ParseLiteral(ref cursor, "from");
                                if (r6 != null)
                                {
                                    IParseResult<IList<string>> r7 = null;
                                    r7 = this._(ref cursor);
                                    if (r7 != null)
                                    {
                                        IParseResult<SyntaxNode> r8 = null;
                                        var bStart = cursor;
                                        if (r8 == null)
                                        {
                                            r8 = this.number(ref cursor);
                                        }
                                        if (r8 == null)
                                        {
                                            r8 = this.lookup(ref cursor);
                                        }
                                        var bEnd = cursor;
                                        var b = ValueOrDefault(r8);
                                        if (r8 != null)
                                        {
                                            r0 = this.ReturnHelper<SyntaxNode>(startCursor0, ref cursor, state =>
                                                #line 118 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                                                                                                            new SubtractionNode(b,a)
                                                #line default
                                                );
                                        }
                                        else
                                        {
                                            cursor = startCursor0;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 119 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
         SyntaxNode
            #line default
            > division(ref Cursor cursor)
        {
            IParseResult<SyntaxNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "divide");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this._(ref cursor);
                if (r2 != null)
                {
                    IParseResult<SyntaxNode> r3 = null;
                    var lStart = cursor;
                    if (r3 == null)
                    {
                        r3 = this.number(ref cursor);
                    }
                    if (r3 == null)
                    {
                        r3 = this.lookup(ref cursor);
                    }
                    var lEnd = cursor;
                    var l = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        IParseResult<IList<string>> r4 = null;
                        r4 = this._(ref cursor);
                        if (r4 != null)
                        {
                            IParseResult<string> r5 = null;
                            if (r5 == null)
                            {
                                r5 = this.ParseLiteral(ref cursor, "into");
                            }
                            if (r5 == null)
                            {
                                r5 = this.ParseLiteral(ref cursor, "by");
                            }
                            if (r5 != null)
                            {
                                IParseResult<IList<string>> r6 = null;
                                r6 = this._(ref cursor);
                                if (r6 != null)
                                {
                                    IParseResult<IList<string>> r7 = null;
                                    var startCursor1 = cursor;
                                    var l0 = new List<string>();
                                    while (l0.Count < 1)
                                    {
                                        IParseResult<string> r8 = null;
                                        r8 = this.ParseLiteral(ref cursor, "its");
                                        if (r8 != null)
                                        {
                                            l0.Add(r8.Value);
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                    r7 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                                    if (r7 != null)
                                    {
                                        IParseResult<IList<string>> r9 = null;
                                        r9 = this._(ref cursor);
                                        if (r9 != null)
                                        {
                                            IParseResult<SyntaxNode> r10 = null;
                                            var rStart = cursor;
                                            if (r10 == null)
                                            {
                                                r10 = this.number(ref cursor);
                                            }
                                            if (r10 == null)
                                            {
                                                r10 = this.lookup(ref cursor);
                                            }
                                            var rEnd = cursor;
                                            var r = ValueOrDefault(r10);
                                            if (r10 != null)
                                            {
                                                r0 = this.ReturnHelper<SyntaxNode>(startCursor0, ref cursor, state =>
                                                    #line 119 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                                                                                                  new DivisionNode(l,r)
                                                    #line default
                                                    );
                                            }
                                            else
                                            {
                                                cursor = startCursor0;
                                            }
                                        }
                                        else
                                        {
                                            cursor = startCursor0;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 120 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
               SyntaxNode
            #line default
            > multiplication(ref Cursor cursor)
        {
            IParseResult<SyntaxNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "multiply");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this._(ref cursor);
                if (r2 != null)
                {
                    IParseResult<SyntaxNode> r3 = null;
                    var lStart = cursor;
                    if (r3 == null)
                    {
                        r3 = this.number(ref cursor);
                    }
                    if (r3 == null)
                    {
                        r3 = this.lookup(ref cursor);
                    }
                    var lEnd = cursor;
                    var l = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        IParseResult<IList<string>> r4 = null;
                        r4 = this._(ref cursor);
                        if (r4 != null)
                        {
                            IParseResult<string> r5 = null;
                            r5 = this.ParseLiteral(ref cursor, "and");
                            if (r5 != null)
                            {
                                IParseResult<IList<string>> r6 = null;
                                r6 = this._(ref cursor);
                                if (r6 != null)
                                {
                                    IParseResult<SyntaxNode> r7 = null;
                                    var rStart = cursor;
                                    if (r7 == null)
                                    {
                                        r7 = this.number(ref cursor);
                                    }
                                    if (r7 == null)
                                    {
                                        r7 = this.lookup(ref cursor);
                                    }
                                    var rEnd = cursor;
                                    var r = ValueOrDefault(r7);
                                    if (r7 != null)
                                    {
                                        r0 = this.ReturnHelper<SyntaxNode>(startCursor0, ref cursor, state =>
                                            #line 120 "G:\Facharbeit final build\Prayer\prayer\Prayer.peg"
                                                                                         new DivisionNode(l,r)
                                            #line default
                                            );
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<IList<string>> optional_is(ref Cursor cursor)
        {
            IParseResult<IList<string>> r0 = null;
            var startCursor0 = cursor;
            var l0 = new List<string>();
            while (l0.Count < 1)
            {
                IParseResult<string> r1 = null;
                var startCursor1 = cursor;
                IParseResult<string> r2 = null;
                r2 = this.ParseLiteral(ref cursor, "Is");
                if (r2 != null)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this._(ref cursor);
                    if (r3 != null)
                    {
                        {
                            var len = cursor.Location - startCursor1.Location;
                            r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                                state.Subject.Substring(startCursor1.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
                if (r1 != null)
                {
                    l0.Add(r1.Value);
                }
                else
                {
                    break;
                }
            }
            r0 = this.ReturnHelper<IList<string>>(startCursor0, ref cursor, state => l0.AsReadOnly());
            return r0;
        }

        private IParseResult<IList<string>> optional_and(ref Cursor cursor)
        {
            IParseResult<IList<string>> r0 = null;
            var startCursor0 = cursor;
            var l0 = new List<string>();
            while (l0.Count < 1)
            {
                IParseResult<string> r1 = null;
                var startCursor1 = cursor;
                IParseResult<string> r2 = null;
                r2 = this.ParseLiteral(ref cursor, "And");
                if (r2 != null)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this._(ref cursor);
                    if (r3 != null)
                    {
                        {
                            var len = cursor.Location - startCursor1.Location;
                            r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                                state.Subject.Substring(startCursor1.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
                if (r1 != null)
                {
                    l0.Add(r1.Value);
                }
                else
                {
                    break;
                }
            }
            r0 = this.ReturnHelper<IList<string>>(startCursor0, ref cursor, state => l0.AsReadOnly());
            return r0;
        }

        private IParseResult<string> chars(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "azAZ  09");
            return r0;
        }

        private IParseResult<IList<string>> _(ref Cursor cursor)
        {
            IParseResult<IList<string>> r0 = null;
            var startCursor0 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r1 = null;
                r1 = this.ParseClass(ref cursor, "\t\t  ");
                if (r1 != null)
                {
                    l0.Add(r1.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r0 = this.ReturnHelper<IList<string>>(startCursor0, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> EOL(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "\n");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "\r\n");
            }
            return r0;
        }

        private IParseResult<T> StartRuleHelper<T>(Cursor cursor, ParseDelegate<T> startRule, string ruleName)
        {
            var result = startRule(ref cursor);
            if (result == null)
            {
                throw ExceptionHelper(cursor, state => "Failed to parse '" + ruleName + "'.");
            }
            return result;
        }

        private IParseResult<string> ParseLiteral(ref Cursor cursor, string literal, bool ignoreCase = true)
        {
            if (cursor.Location + literal.Length <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, literal.Length);
                if (ignoreCase ? substr.Equals(literal, StringComparison.OrdinalIgnoreCase) : substr == literal)
                {
                    var endCursor = cursor.Advance(substr.Length);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseClass(ref Cursor cursor, string characterRanges, bool negated = false, bool ignoreCase = true)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var c = cursor.Subject[cursor.Location];
                bool match = false;
                for (int i = 0; !match && i < characterRanges.Length; i += 2)
                {
                    match = c >= characterRanges[i] && c <= characterRanges[i + 1];
                }
                if (!match && ignoreCase && (char.IsUpper(c) || char.IsLower(c)))
                {
                    var cs = c.ToString();
                    for (int i = 0; !match && i < characterRanges.Length; i += 2)
                    {
                        var min = characterRanges[i];
                        var max = characterRanges[i + 1];
                        for (char o = min; !match && o <= max; o++)
                        {
                            match = (char.IsUpper(o) || char.IsLower(o)) && cs.Equals(o.ToString(), StringComparison.CurrentCultureIgnoreCase);
                        }
                    }
                }
                if (match ^ negated)
                {
                    var endCursor = cursor.Advance(1);
                    var substr = cursor.Subject.Substring(cursor.Location, 1);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseAny(ref Cursor cursor)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, 1);
                var endCursor = cursor.Advance(1);
                var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                cursor = endCursor;
                return result;
            }
            return null;
        }

        private IParseResult<T> ReturnHelper<T>(Cursor startCursor, ref Cursor endCursor, Func<Cursor, T> wrappedCode)
        {
            var result = wrappedCode(endCursor);
            var lexical = result as ILexical;
            if (lexical != null && lexical.StartCursor == null && lexical.EndCursor == null)
            {
                lexical.StartCursor = startCursor;
                lexical.EndCursor = endCursor;
            }
            return new ParseResult<T>(startCursor, endCursor, result);
        }

        private IParseResult<T> ParseHelper<T>(ref Cursor cursor, ParseDelegate<T> wrappedCode)
        {
            var startCursor = cursor;
            var result = wrappedCode(ref cursor);
            if (result == null)
            {
                cursor = startCursor;
                return null;
            }
            else
            {
                cursor = cursor.WithMutability(false);
                return result;
            }
        }

        private Exception ExceptionHelper(Cursor cursor, Func<Cursor, string> wrappedCode)
        {
            var ex = new FormatException(wrappedCode(cursor));
            ex.Data["cursor"] = cursor;
            return ex;
        }

        private T ValueOrDefault<T>(IParseResult<T> result)
        {
            return result == null
                ? default(T)
                : result.Value;
        }
    }
}
