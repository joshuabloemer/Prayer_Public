// -----------------------------------------------------------------------
// <auto-generated>
//   This code was generated by Pegasus 4.1.0.0
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

namespace
Parsers
{
    using System;
    using System.Collections.Generic;
    using Pegasus.Common;

    /// <summary>
    ///  Parses a string according to the rules of the <see cref="Parser" /> grammar.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Pegasus", "4.1.0.0")]
    public
    partial class
    Parser
    {

        /// <summary>
        ///  Parses a string according to the rules of the <see cref="Parser" /> grammar.
        /// </summary>
        /// <param name="subject">The parsing subject.</param>
        /// <param name="fileName">The optional file name to use in error messages.</param>
        /// <returns>The <see cref="BlockNode" /> parsed from <paramref name="subject" />.</returns>
        /// <exception cref="FormatException">
        ///  Thrown when parsing fails against <paramref name="subject"/>.  The exception's <code>Data["cursor"]</code> will be set with the cursor where the fatal error occurred.
        /// </exception>
        public BlockNode Parse(string subject, string fileName = null)
        {
            var cursor = new Cursor(subject, 0, fileName);
            return this.StartRuleHelper(cursor, this.block, "block").Value;
        }

        private IParseResult<
            #line 3 "E:\prayer\Prayer\Prayer\Prayer.peg"
      BlockNode
            #line default
            > block(ref Cursor cursor)
        {
            IParseResult<BlockNode> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<OutputNode> r1 = null;
                var headStart = cursor;
                r1 = this.statement(ref cursor);
                var headEnd = cursor;
                var head = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<string> r2 = null;
                    r2 = this.EOL(ref cursor);
                    if (r2 != null)
                    {
                        IParseResult<BlockNode> r3 = null;
                        var tailStart = cursor;
                        r3 = this.block(ref cursor);
                        var tailEnd = cursor;
                        var tail = ValueOrDefault(r3);
                        if (r3 != null)
                        {
                            r0 = this.ReturnHelper<BlockNode>(startCursor0, ref cursor, state =>
                                #line 4 "E:\prayer\Prayer\Prayer\Prayer.peg"
                                      new BlockNode(head).Concat(tail)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<OutputNode> r4 = null;
                var lineStart = cursor;
                r4 = this.statement(ref cursor);
                var lineEnd = cursor;
                var line = ValueOrDefault(r4);
                if (r4 != null)
                {
                    r0 = this.ReturnHelper<BlockNode>(startCursor1, ref cursor, state =>
                        #line 5 "E:\prayer\Prayer\Prayer\Prayer.peg"
                       new BlockNode(line)
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            return r0;
        }

        private IParseResult<OutputNode> statement(ref Cursor cursor)
        {
            IParseResult<OutputNode> r0 = null;
            r0 = this.output(ref cursor);
            return r0;
        }

        private IParseResult<
            #line 8 "E:\prayer\Prayer\Prayer\Prayer.peg"
       OutputNode
            #line default
            > output(ref Cursor cursor)
        {
            IParseResult<OutputNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "Speak");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this._(ref cursor);
                if (r2 != null)
                {
                    IParseResult<SyntaxNode> r3 = null;
                    var eStart = cursor;
                    r3 = this.expression(ref cursor);
                    var eEnd = cursor;
                    var e = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper<OutputNode>(startCursor0, ref cursor, state =>
                            #line 8 "E:\prayer\Prayer\Prayer\Prayer.peg"
                                              new OutputNode(e)
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 9 "E:\prayer\Prayer\Prayer\Prayer.peg"
       NumberNode
            #line default
            > number(ref Cursor cursor)
        {
            IParseResult<NumberNode> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var nStart = cursor;
            var startCursor1 = cursor;
            IParseResult<IList<string>> r2 = null;
            var startCursor2 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r3 = null;
                r3 = this.ParseClass(ref cursor, "09");
                if (r3 != null)
                {
                    l0.Add(r3.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r2 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor2;
            }
            if (r2 != null)
            {
                {
                    var len = cursor.Location - startCursor1.Location;
                    r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                        state.Subject.Substring(startCursor1.Location, len)
                        );
                }
            }
            else
            {
                cursor = startCursor1;
            }
            var nEnd = cursor;
            var n = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<NumberNode>(startCursor0, ref cursor, state =>
                    #line 9 "E:\prayer\Prayer\Prayer\Prayer.peg"
                                     new NumberNode(decimal.Parse(n))
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 11 "E:\prayer\Prayer\Prayer\Prayer.peg"
           SyntaxNode
            #line default
            > expression(ref Cursor cursor)
        {
            IParseResult<SyntaxNode> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "Take ye the sum of");
                if (r1 != null)
                {
                    IParseResult<IList<string>> r2 = null;
                    r2 = this._(ref cursor);
                    if (r2 != null)
                    {
                        IParseResult<NumberNode> r3 = null;
                        var lStart = cursor;
                        r3 = this.number(ref cursor);
                        var lEnd = cursor;
                        var l = ValueOrDefault(r3);
                        if (r3 != null)
                        {
                            IParseResult<IList<string>> r4 = null;
                            r4 = this._(ref cursor);
                            if (r4 != null)
                            {
                                IParseResult<string> r5 = null;
                                r5 = this.ParseLiteral(ref cursor, "and");
                                if (r5 != null)
                                {
                                    IParseResult<IList<string>> r6 = null;
                                    r6 = this._(ref cursor);
                                    if (r6 != null)
                                    {
                                        IParseResult<NumberNode> r7 = null;
                                        var rStart = cursor;
                                        r7 = this.number(ref cursor);
                                        var rEnd = cursor;
                                        var r = ValueOrDefault(r7);
                                        if (r7 != null)
                                        {
                                            r0 = this.ReturnHelper<SyntaxNode>(startCursor0, ref cursor, state =>
                                                #line 12 "E:\prayer\Prayer\Prayer\Prayer.peg"
                                                           new AdditionNode(l,r)
                                                #line default
                                                );
                                        }
                                        else
                                        {
                                            cursor = startCursor0;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r8 = null;
                r8 = this.ParseLiteral(ref cursor, "bless");
                if (r8 != null)
                {
                    IParseResult<IList<string>> r9 = null;
                    r9 = this._(ref cursor);
                    if (r9 != null)
                    {
                        IParseResult<NumberNode> r10 = null;
                        var lStart = cursor;
                        r10 = this.number(ref cursor);
                        var lEnd = cursor;
                        var l = ValueOrDefault(r10);
                        if (r10 != null)
                        {
                            r0 = this.ReturnHelper<SyntaxNode>(startCursor1, ref cursor, state =>
                                #line 13 "E:\prayer\Prayer\Prayer\Prayer.peg"
                           new IncrementNode(l)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<string> r11 = null;
                r11 = this.ParseLiteral(ref cursor, "God taketh away");
                if (r11 != null)
                {
                    IParseResult<IList<string>> r12 = null;
                    r12 = this._(ref cursor);
                    if (r12 != null)
                    {
                        IParseResult<NumberNode> r13 = null;
                        var lStart = cursor;
                        r13 = this.number(ref cursor);
                        var lEnd = cursor;
                        var l = ValueOrDefault(r13);
                        if (r13 != null)
                        {
                            IParseResult<IList<string>> r14 = null;
                            r14 = this._(ref cursor);
                            if (r14 != null)
                            {
                                IParseResult<string> r15 = null;
                                r15 = this.ParseLiteral(ref cursor, "from");
                                if (r15 != null)
                                {
                                    IParseResult<IList<string>> r16 = null;
                                    r16 = this._(ref cursor);
                                    if (r16 != null)
                                    {
                                        IParseResult<NumberNode> r17 = null;
                                        var rStart = cursor;
                                        r17 = this.number(ref cursor);
                                        var rEnd = cursor;
                                        var r = ValueOrDefault(r17);
                                        if (r17 != null)
                                        {
                                            r0 = this.ReturnHelper<SyntaxNode>(startCursor2, ref cursor, state =>
                                                #line 14 "E:\prayer\Prayer\Prayer\Prayer.peg"
                                                         new SubtractionNode(l,r)
                                                #line default
                                                );
                                        }
                                        else
                                        {
                                            cursor = startCursor2;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor2;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor2;
                                }
                            }
                            else
                            {
                                cursor = startCursor2;
                            }
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            if (r0 == null)
            {
                var startCursor3 = cursor;
                IParseResult<string> r18 = null;
                r18 = this.ParseLiteral(ref cursor, "curse");
                if (r18 != null)
                {
                    IParseResult<IList<string>> r19 = null;
                    r19 = this._(ref cursor);
                    if (r19 != null)
                    {
                        IParseResult<NumberNode> r20 = null;
                        var lStart = cursor;
                        r20 = this.number(ref cursor);
                        var lEnd = cursor;
                        var l = ValueOrDefault(r20);
                        if (r20 != null)
                        {
                            r0 = this.ReturnHelper<SyntaxNode>(startCursor3, ref cursor, state =>
                                #line 15 "E:\prayer\Prayer\Prayer\Prayer.peg"
                           new DecrementNode(l)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                }
                else
                {
                    cursor = startCursor3;
                }
            }
            if (r0 == null)
            {
                r0 = this.comparison(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.number(ref cursor);
            }
            return r0;
        }

        private IParseResult<
            #line 19 "E:\prayer\Prayer\Prayer\Prayer.peg"
           SyntaxNode
            #line default
            > comparison(ref Cursor cursor)
        {
            IParseResult<SyntaxNode> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<NumberNode> r1 = null;
                var lStart = cursor;
                r1 = this.number(ref cursor);
                var lEnd = cursor;
                var l = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<IList<string>> r2 = null;
                    r2 = this._(ref cursor);
                    if (r2 != null)
                    {
                        IParseResult<string> r3 = null;
                        r3 = this.ParseLiteral(ref cursor, "blessed by");
                        if (r3 != null)
                        {
                            IParseResult<IList<string>> r4 = null;
                            r4 = this._(ref cursor);
                            if (r4 != null)
                            {
                                IParseResult<NumberNode> r5 = null;
                                var rStart = cursor;
                                r5 = this.number(ref cursor);
                                var rEnd = cursor;
                                var r = ValueOrDefault(r5);
                                if (r5 != null)
                                {
                                    r0 = this.ReturnHelper<SyntaxNode>(startCursor0, ref cursor, state =>
                                        #line 20 "E:\prayer\Prayer\Prayer\Prayer.peg"
                                          new EqualsNode(l,r)
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<NumberNode> r6 = null;
                var lStart = cursor;
                r6 = this.number(ref cursor);
                var lEnd = cursor;
                var l = ValueOrDefault(r6);
                if (r6 != null)
                {
                    IParseResult<IList<string>> r7 = null;
                    r7 = this._(ref cursor);
                    if (r7 != null)
                    {
                        IParseResult<string> r8 = null;
                        r8 = this.ParseLiteral(ref cursor, "cursed by");
                        if (r8 != null)
                        {
                            IParseResult<IList<string>> r9 = null;
                            r9 = this._(ref cursor);
                            if (r9 != null)
                            {
                                IParseResult<NumberNode> r10 = null;
                                var rStart = cursor;
                                r10 = this.number(ref cursor);
                                var rEnd = cursor;
                                var r = ValueOrDefault(r10);
                                if (r10 != null)
                                {
                                    r0 = this.ReturnHelper<SyntaxNode>(startCursor1, ref cursor, state =>
                                        #line 21 "E:\prayer\Prayer\Prayer\Prayer.peg"
                                         new NotEqualsNode(l,r)
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor1;
                                }
                            }
                            else
                            {
                                cursor = startCursor1;
                            }
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<NumberNode> r11 = null;
                var lStart = cursor;
                r11 = this.number(ref cursor);
                var lEnd = cursor;
                var l = ValueOrDefault(r11);
                if (r11 != null)
                {
                    IParseResult<IList<string>> r12 = null;
                    r12 = this._(ref cursor);
                    if (r12 != null)
                    {
                        IParseResult<string> r13 = null;
                        r13 = this.ParseLiteral(ref cursor, "holier than");
                        if (r13 != null)
                        {
                            IParseResult<IList<string>> r14 = null;
                            r14 = this._(ref cursor);
                            if (r14 != null)
                            {
                                IParseResult<NumberNode> r15 = null;
                                var rStart = cursor;
                                r15 = this.number(ref cursor);
                                var rEnd = cursor;
                                var r = ValueOrDefault(r15);
                                if (r15 != null)
                                {
                                    r0 = this.ReturnHelper<SyntaxNode>(startCursor2, ref cursor, state =>
                                        #line 22 "E:\prayer\Prayer\Prayer\Prayer.peg"
                                           new GreaterThanNode(l,r)
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor2;
                                }
                            }
                            else
                            {
                                cursor = startCursor2;
                            }
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            if (r0 == null)
            {
                var startCursor3 = cursor;
                IParseResult<NumberNode> r16 = null;
                var lStart = cursor;
                r16 = this.number(ref cursor);
                var lEnd = cursor;
                var l = ValueOrDefault(r16);
                if (r16 != null)
                {
                    IParseResult<IList<string>> r17 = null;
                    r17 = this._(ref cursor);
                    if (r17 != null)
                    {
                        IParseResult<string> r18 = null;
                        r18 = this.ParseLiteral(ref cursor, "unholier than");
                        if (r18 != null)
                        {
                            IParseResult<IList<string>> r19 = null;
                            r19 = this._(ref cursor);
                            if (r19 != null)
                            {
                                IParseResult<NumberNode> r20 = null;
                                var rStart = cursor;
                                r20 = this.number(ref cursor);
                                var rEnd = cursor;
                                var r = ValueOrDefault(r20);
                                if (r20 != null)
                                {
                                    r0 = this.ReturnHelper<SyntaxNode>(startCursor3, ref cursor, state =>
                                        #line 23 "E:\prayer\Prayer\Prayer\Prayer.peg"
                                             new LessThanNode(l,r)
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor3;
                                }
                            }
                            else
                            {
                                cursor = startCursor3;
                            }
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                }
                else
                {
                    cursor = startCursor3;
                }
            }
            if (r0 == null)
            {
                var startCursor4 = cursor;
                IParseResult<NumberNode> r21 = null;
                var lStart = cursor;
                r21 = this.number(ref cursor);
                var lEnd = cursor;
                var l = ValueOrDefault(r21);
                if (r21 != null)
                {
                    IParseResult<IList<string>> r22 = null;
                    r22 = this._(ref cursor);
                    if (r22 != null)
                    {
                        IParseResult<string> r23 = null;
                        r23 = this.ParseLiteral(ref cursor, "as holy as");
                        if (r23 != null)
                        {
                            IParseResult<IList<string>> r24 = null;
                            r24 = this._(ref cursor);
                            if (r24 != null)
                            {
                                IParseResult<NumberNode> r25 = null;
                                var rStart = cursor;
                                r25 = this.number(ref cursor);
                                var rEnd = cursor;
                                var r = ValueOrDefault(r25);
                                if (r25 != null)
                                {
                                    r0 = this.ReturnHelper<SyntaxNode>(startCursor4, ref cursor, state =>
                                        #line 24 "E:\prayer\Prayer\Prayer\Prayer.peg"
                                          new GreaterOrEqualNode(l,r)
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor4;
                                }
                            }
                            else
                            {
                                cursor = startCursor4;
                            }
                        }
                        else
                        {
                            cursor = startCursor4;
                        }
                    }
                    else
                    {
                        cursor = startCursor4;
                    }
                }
                else
                {
                    cursor = startCursor4;
                }
            }
            if (r0 == null)
            {
                var startCursor5 = cursor;
                IParseResult<NumberNode> r26 = null;
                var lStart = cursor;
                r26 = this.number(ref cursor);
                var lEnd = cursor;
                var l = ValueOrDefault(r26);
                if (r26 != null)
                {
                    IParseResult<IList<string>> r27 = null;
                    r27 = this._(ref cursor);
                    if (r27 != null)
                    {
                        IParseResult<string> r28 = null;
                        r28 = this.ParseLiteral(ref cursor, "as unholy as");
                        if (r28 != null)
                        {
                            IParseResult<IList<string>> r29 = null;
                            r29 = this._(ref cursor);
                            if (r29 != null)
                            {
                                IParseResult<NumberNode> r30 = null;
                                var rStart = cursor;
                                r30 = this.number(ref cursor);
                                var rEnd = cursor;
                                var r = ValueOrDefault(r30);
                                if (r30 != null)
                                {
                                    r0 = this.ReturnHelper<SyntaxNode>(startCursor5, ref cursor, state =>
                                        #line 25 "E:\prayer\Prayer\Prayer\Prayer.peg"
                                            new LessOrEqualNode(l,r)
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor5;
                                }
                            }
                            else
                            {
                                cursor = startCursor5;
                            }
                        }
                        else
                        {
                            cursor = startCursor5;
                        }
                    }
                    else
                    {
                        cursor = startCursor5;
                    }
                }
                else
                {
                    cursor = startCursor5;
                }
            }
            return r0;
        }

        private IParseResult<IList<string>> _(ref Cursor cursor)
        {
            IParseResult<IList<string>> r0 = null;
            var startCursor0 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r1 = null;
                r1 = this.ParseClass(ref cursor, "\t\t  ");
                if (r1 != null)
                {
                    l0.Add(r1.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r0 = this.ReturnHelper<IList<string>>(startCursor0, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> EOL(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "\n");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "\r\n");
            }
            return r0;
        }

        private IParseResult<string> EOF(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseAny(ref cursor);
            if (r1 == null)
            {
                r0 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<T> StartRuleHelper<T>(Cursor cursor, ParseDelegate<T> startRule, string ruleName)
        {
            var result = startRule(ref cursor);
            if (result == null)
            {
                throw ExceptionHelper(cursor, state => "Failed to parse '" + ruleName + "'.");
            }
            return result;
        }

        private IParseResult<string> ParseLiteral(ref Cursor cursor, string literal, bool ignoreCase = false)
        {
            if (cursor.Location + literal.Length <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, literal.Length);
                if (ignoreCase ? substr.Equals(literal, StringComparison.OrdinalIgnoreCase) : substr == literal)
                {
                    var endCursor = cursor.Advance(substr.Length);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseClass(ref Cursor cursor, string characterRanges, bool negated = false, bool ignoreCase = false)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var c = cursor.Subject[cursor.Location];
                bool match = false;
                for (int i = 0; !match && i < characterRanges.Length; i += 2)
                {
                    match = c >= characterRanges[i] && c <= characterRanges[i + 1];
                }
                if (!match && ignoreCase && (char.IsUpper(c) || char.IsLower(c)))
                {
                    var cs = c.ToString();
                    for (int i = 0; !match && i < characterRanges.Length; i += 2)
                    {
                        var min = characterRanges[i];
                        var max = characterRanges[i + 1];
                        for (char o = min; !match && o <= max; o++)
                        {
                            match = (char.IsUpper(o) || char.IsLower(o)) && cs.Equals(o.ToString(), StringComparison.CurrentCultureIgnoreCase);
                        }
                    }
                }
                if (match ^ negated)
                {
                    var endCursor = cursor.Advance(1);
                    var substr = cursor.Subject.Substring(cursor.Location, 1);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseAny(ref Cursor cursor)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, 1);
                var endCursor = cursor.Advance(1);
                var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                cursor = endCursor;
                return result;
            }
            return null;
        }

        private IParseResult<T> ReturnHelper<T>(Cursor startCursor, ref Cursor endCursor, Func<Cursor, T> wrappedCode)
        {
            var result = wrappedCode(endCursor);
            var lexical = result as ILexical;
            if (lexical != null && lexical.StartCursor == null && lexical.EndCursor == null)
            {
                lexical.StartCursor = startCursor;
                lexical.EndCursor = endCursor;
            }
            return new ParseResult<T>(startCursor, endCursor, result);
        }

        private IParseResult<T> ParseHelper<T>(ref Cursor cursor, ParseDelegate<T> wrappedCode)
        {
            var startCursor = cursor;
            var result = wrappedCode(ref cursor);
            if (result == null)
            {
                cursor = startCursor;
                return null;
            }
            else
            {
                cursor = cursor.WithMutability(false);
                return result;
            }
        }

        private Exception ExceptionHelper(Cursor cursor, Func<Cursor, string> wrappedCode)
        {
            var ex = new FormatException(wrappedCode(cursor));
            ex.Data["cursor"] = cursor;
            return ex;
        }

        private T ValueOrDefault<T>(IParseResult<T> result)
        {
            return result == null
                ? default(T)
                : result.Value;
        }
    }
}
